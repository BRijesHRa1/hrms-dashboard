{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8081';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('jwtToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Authentication services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        localStorage.setItem('jwtToken', response.data.jwtToken);\n        localStorage.setItem('userEmail', response.data.email);\n        localStorage.setItem('userName', response.data.name);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Login failed',\n        success: false\n      };\n    }\n  },\n  signup: async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/signup', {\n        name,\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Signup failed',\n        success: false\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('userName');\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('jwtToken');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","login","email","password","response","post","data","success","setItem","jwtToken","name","_error$response","message","signup","_error$response2","logout","removeItem","isAuthenticated"],"sources":["/Users/brijeshrai/Documents/Cursor/HRMS dashboard/hrms-dashboard/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8081';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include auth token in requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('jwtToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Authentication services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      if (response.data.success) {\n        localStorage.setItem('jwtToken', response.data.jwtToken);\n        localStorage.setItem('userEmail', response.data.email);\n        localStorage.setItem('userName', response.data.name);\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Login failed', success: false };\n    }\n  },\n  \n  signup: async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/signup', { name, email, password });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Signup failed', success: false };\n    }\n  },\n  \n  logout: () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('userName');\n  },\n  \n  isAuthenticated: () => {\n    return !!localStorage.getItem('jwtToken');\n  }\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC9C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MACnE,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBZ,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEJ,QAAQ,CAACE,IAAI,CAACG,QAAQ,CAAC;QACxDd,YAAY,CAACa,OAAO,CAAC,WAAW,EAAEJ,QAAQ,CAACE,IAAI,CAACJ,KAAK,CAAC;QACtDP,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEJ,QAAQ,CAACE,IAAI,CAACI,IAAI,CAAC;MACtD;MACA,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA,IAAAc,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAd,KAAK,CAACO,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,KAAI;QAAEM,OAAO,EAAE,cAAc;QAAEL,OAAO,EAAE;MAAM,CAAC;IAC3E;EACF,CAAC;EAEDM,MAAM,EAAE,MAAAA,CAAOH,IAAI,EAAER,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,cAAc,EAAE;QAAEK,IAAI;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC1E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA,IAAAiB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAjB,KAAK,CAACO,QAAQ,cAAAU,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,KAAI;QAAEM,OAAO,EAAE,eAAe;QAAEL,OAAO,EAAE;MAAM,CAAC;IAC5E;EACF,CAAC;EAEDQ,MAAM,EAAEA,CAAA,KAAM;IACZpB,YAAY,CAACqB,UAAU,CAAC,UAAU,CAAC;IACnCrB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;IACpCrB,YAAY,CAACqB,UAAU,CAAC,UAAU,CAAC;EACrC,CAAC;EAEDC,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAO,CAAC,CAACtB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC3C;AACF,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}